import * as fs from 'fs';
import * as path from 'path';
import { Construct, ISynthesisSession, Node } from 'constructs';
import * as yaml from 'js-yaml';
import { Workflow } from './workflow';

/**
 * Represents a cdkaction stack.
 */
export class Stack extends Construct {

  /**
   * A unique identifier for the stack. Will be printed in synthesized manifests.
   */
  private readonly id: string;

  /**
   * Defines a cdkaction stack.
   * @param scope cdkaction app.
   * @param id A unique identifier for this stack.
   */
  public constructor(scope: Construct, id: string) {
    super(scope, id);
    this.id = id;
  }

  /**
   * A custom `onSynthesize` function to generate GH Action manifests.
   * @param session Synthesis session.
   */
  protected onSynthesize(session: ISynthesisSession) {
    for (const child of Node.of(this).children) {
      if (child instanceof Workflow) {
        const workflowOutput = path.join(session.outdir, child.outputFile);

        // Get raw yaml of workflow
        const rawYaml = yaml.dump(child.toGHAction(), { lineWidth: -1, noCompatMode: true, quotingType: '"' });

        // Save the formatted yaml
        fs.writeFileSync(workflowOutput, `# Generated by cdkactions. Do not modify\n# Generated as part of the '${this.id}' stack.\n`);
        fs.writeFileSync(workflowOutput, rawYaml, { flag: 'a' });
      }
    }
  }
}
